---
import type { GetStaticPaths } from 'astro'
import type { CollectionEntry } from 'astro:content'

import AuthorTitle from '@/components/AuthorTitle.astro'
import RecipeCard from '@/components/RecipeCard.astro'
import Section from '@/components/Section.astro'
import { commonMessages } from '@/i18n/locales/common/en'
import Layout from '@/layouts/Layout.astro'
import { getCollectionByLocale, sortByBrewingMethod } from '@/utils'

const locale = Astro.currentLocale || 'en'
const recipes = await getCollectionByLocale('recipes', locale)

const groupedRecipes = Object.entries(
  Object.groupBy<string, CollectionEntry<'recipes'>>(
    recipes, (recipe) => recipe.data.author.id
  ) as Record<string, CollectionEntry<'recipes'>[]>
)

groupedRecipes.sort((a, b) => b[1].length - a[1].length)

groupedRecipes.forEach(([, authorRecipes]) => {
  authorRecipes = sortByBrewingMethod(authorRecipes, (recipe) => recipe.data.method)
})

const messages = commonMessages(locale)

export const getStaticPaths = (async () => [
  { params: { lang: 'ru' } },
  { params: { lang: 'en' } }
]) satisfies GetStaticPaths
---

<Layout description={messages.description} title={messages.recipesByAuthor}>
  {
    groupedRecipes.map(([authorId, recipes]) => (
      <div class="section">
        <Section baseId={`${authorId}-section`}>
          <AuthorTitle {authorId} slot="title" />
          <div class="recipes">
            {recipes.map(recipe => (
              <RecipeCard hideAuthor {recipe} />
            ))}
          </div>
        </Section>
      </div>
    ))
  }
</Layout>

<style>
  .section {
    margin-block-end: 36px;
  }

  .title {
    font-weight: bold;
    color: var(--color-text);
    font-size: 24px;
    margin: 0;
  }

  .recipes {
    display: grid;
    grid-template-columns: repeat(auto-fill, var(--card-width));
    gap: 32px;
  }
</style>
