---
import type { GetStaticPaths } from 'astro'

import { settingsMessages } from '@/i18n/locales/settings/en'
import Layout from '@/layouts/Layout.astro'

const messages = settingsMessages(Astro.currentLocale)

export const getStaticPaths = (async () => ([
  { params: { lang: 'ru' } },
  { params: { lang: 'en' } }
])) satisfies GetStaticPaths
---

<Layout title={messages.title} description={messages.description}>
  <h1>{messages.header}</h1>
  <div class="settings">
    <label class="setting">
      <span>{messages.theme}</span>
      <select class="select" id="theme-select" name="theme">
        <option class="selectOption" value="auto">
          {messages['theme.system']}
        </option>
        <option class="selectOption" value="dark">
          {messages['theme.dark']}
        </option>
        <option class="selectOption" value="light">
          {messages['theme.light']}
        </option>
      </select>
    </label>
    <label class="setting">
      <span>{messages.language}</span>
      <select class="select" id="language-select" name="language">
        <option class="selectOption" selected={Astro.currentLocale === 'ru'} value="ru"> Русский </option>
        <option class="selectOption" selected={Astro.currentLocale === 'en'} value="en"> English </option>
      </select>
    </label>
  </div>
</Layout>

<script>
  const selectLanguageEl = document.getElementById('language-select') as HTMLSelectElement
  if (selectLanguageEl) {
    selectLanguageEl.addEventListener('change', event => {
      const target = event.target as HTMLSelectElement
      document.location.href = `/${target.value}/settings`
    })
  }

  const selectThemeEl = document.getElementById('theme-select') as HTMLSelectElement
  if (selectThemeEl) {
    const theme = localStorage.getItem('theme') || 'auto'
    const selectedOptionsEl = selectThemeEl.getElementsByTagName('option')
    if (selectedOptionsEl) {
      for (const option of selectedOptionsEl) {
        if (option.value === theme) {
          option.selected = true
        }
      }
    }

    selectThemeEl.addEventListener('change', event => {
      const selectedTheme = (event.target as HTMLSelectElement).value
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
      const theme = selectedTheme === 'auto' ? systemTheme : selectedTheme
      document.documentElement.setAttribute('data-theme', theme)
      localStorage.setItem('theme', selectedTheme)
    })
  }
</script>

<style>
  .settings {
    display: grid;
    grid-template-columns: repeat(auto-fill, var(--card-width));
    gap: 1em;
    margin-bottom: 2em;
  }

  .setting {
    padding: 1.5rem;
    border-radius: 1.5rem;
    background-color: var(--color-secondary-background);
    box-shadow: var(--common-box-shadow);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 8px;
  }

  .select {
    position: relative;
    font-size: 1.2em;
    text-align: right;
    border: none;
    border-radius: 4px;
    background-color: inherit;
    background-image: url("data:image/svg+xml,%3Csvg fill='black' aria-hidden='true' width='28' height='28' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' viewBox='0 0 847 847'%3E%3Cpath d='M242 298l181 185 182-185c24-25 65 16 40 41L440 550c-9 9-24 9-32 0L201 339c-24-25 17-66 41-41z'/%3E%3C/svg%3E");
    background-size: 16px;
    background-position: right 5px;
    background-repeat: no-repeat;
    appearance: none;
    padding: 0 20px 0 0;
    color: var(--color-text);
    outline: none;
  }

  .select:focus-visible {
    outline: 2px solid var(--color-focus);
  }

  /* Seems there is no other way to change colors inside bg-image */
  :root[data-theme='dark'] .select {
    background-image: url("data:image/svg+xml,%3Csvg fill='white' aria-hidden='true' width='28' height='28' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' viewBox='0 0 847 847'%3E%3Cpath d='M242 298l181 185 182-185c24-25 65 16 40 41L440 550c-9 9-24 9-32 0L201 339c-24-25 17-66 41-41z'/%3E%3C/svg%3E");
  }

  .selectOption {
    background-color: var(--color-menu-tool);
  }
</style>
