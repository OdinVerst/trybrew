---
import type { CollectionEntry } from 'astro:content'

import { getRelativeLocaleUrl } from 'astro:i18n'

import { commonMessages } from '@/i18n/locales/common/en'
import { createPropertyFormatters } from '@/i18n/utils'

import { getRecipeMessages } from '../i18n/locales/recipe/en'
import { humanTimeToSeconds, secondsTimeToHuman } from '../utils'
import Author from './Author.astro'
import RecipeProperties from './RecipeProperties.astro'

type Entry = CollectionEntry<'recipes'>
type Props = { recipe: Entry['data'] }

const { recipe } = Astro.props

const locale = Astro.currentLocale || 'en'
const messages = commonMessages(locale)
const recipeMessages = getRecipeMessages(locale)
const { time, weight } = createPropertyFormatters(Astro.currentLocale)

const href = getRelativeLocaleUrl(locale, `/recipes/${recipe.method}`)

const formattedSteps = recipe.steps
  ?.reduce<({ endTime: number; startTime: number; totalWater: number } & Exclude<Entry['data']['steps'], undefined>[number])[]>((acc, step, index) => {
    const previousStepEndTime = index > 0 ? acc[index - 1].endTime : 0
    const previousStepTotalWater = index > 0 ? acc[index - 1].totalWater : 0
    acc.push({
      ...step,
      endTime: humanTimeToSeconds(step.time) + previousStepEndTime,
      startTime: previousStepEndTime,
      totalWater: step.water + previousStepTotalWater
    })
    return acc
  }, [])
  .map(step => ({
    ...step,
    endTime: time(secondsTimeToHuman(step.endTime)),
    startTime: time(secondsTimeToHuman(step.startTime)),
    time: time(step.time),
    totalWater: weight(step.totalWater),
    water: weight(step.water)
  }))
---

<div class="root">
  <h1 class="title">
    <a class="method-link" {href}>{messages[recipe.method as keyof typeof messages]}</a> / {recipe.name}
  </h1>
  <RecipeProperties properties={recipe.properties} />
  <div>
    {
      formattedSteps
        ? (
        <>
          <h2>Recipe</h2>
          <table>
            <tbody>
              <tr>
                <td colspan="3">
                  <span class="recipe-steps-subheader">{recipeMessages.prewetting}</span>
                </td>
              </tr>
              <tr>
                <td>{formattedSteps[0].startTime} &rArr; {formattedSteps[0].endTime}</td>
                <td>{formattedSteps[0].totalWater}</td>
                <td>{formattedSteps[0].description}</td>
              </tr>
              <tr>
                <td colspan="3">
                  <span class="recipe-steps-subheader">{recipeMessages.infusions}</span>
                </td>
              </tr>
              {formattedSteps.slice(1).map(it => {
                return (
                  <tr>
                    <td>{it.startTime} &rArr; {it.endTime}</td>
                    <td>{it.totalWater}</td>
                    <td>{it.description}</td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </>
          )
        : null
    }
    <slot />
  </div>
  <div class="source">
    <span>{messages.source}:</span>
    <Author image={recipe.authorImg} link={recipe.link} name={recipe.author} />
  </div>
</div>

<style>
  .root {
    padding-block-end: 24px;
  }

  .title {
    margin-block: 0 28px;
    font-size: 24px;
    text-transform: capitalize;
  }

  .method-link {
    display: inline-block;
    color: inherit;
  }

  .method-link:visited {
    color: inherit;
  }

  .link {
    color: inherit;
  }

  .link:visited {
    color: inherit;
  }

  .recipe-steps-subheader {
    color: var(--text-secondary);
    font-size: 14px;
    text-transform: uppercase;
    font-weight: 600;
  }

  table {
    margin-block-end: 24px;
  }

  th,
  td {
    padding: 6px 12px;
  }

  th:first-child,
  td:first-child {
    padding-inline-start: 0;
  }

  th:last-child,
  td:last-child {
    padding-inline-end: 0;
  }

  .source {
    display: flex;
    align-items: center;
    gap: 12px;
  }
</style>

<!-- TODO: Drop these styles, when we migrate new recipes to MDX or frontmatter -->
<style is:global>
  .time-line {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 1em;
    font-size: 18px;
    margin-bottom: 1em;
    max-width: 550px;
  }

  .time-line > * {
    margin: 0;
  }

  .time-note {
    margin-left: 8px;
    opacity: 0.75;
    margin-top: -5px;
    font-size: 0.95em;
  }

  .info-warm {
    background: var(--color-more-info);
    padding: 1em;
    margin-bottom: 1.5em;
    line-height: 1.4;
  }

  .info-warm h2 {
    margin: 0 0 0.5em;
  }
</style>
