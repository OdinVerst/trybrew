---
import { commonMessages } from '@/i18n/locales/common/en'
interface Props {
  steps: {
    description?: string
    group?: string
    time: number
    water: string
  }[]
}
const locale = Astro.currentLocale || 'en'
const messages = commonMessages(locale)

const { steps } = Astro.props
---

<div data-locale={locale} data-steps={JSON.stringify(steps)} id="timer-root">
  <div class="wrapper">
    <svg viewBox="0 0 200 200">
      <!-- Background Circle -->
      <circle class="baseArc" cx="100" cy="100" fill="none" r="90" stroke-width="8"></circle>
      <!-- Progress Arc -->
      <circle
        class="progressArc"
        cx="100"
        cy="100"
        fill="none"
        id="progressArc"
        r="90"
        stroke-linecap="round"
        stroke-width="8"></circle>
    </svg>
    <div class="time segmented" id="time"></div>
    <div class="steps">
      <div class="step" id="step">
        <div class="group" id="group"></div>
        <div id="description"></div>
        <div id="totalWeight"></div>
      </div>
    </div>
  </div>
  <div class="control-panel">
    <button class="control-panel--btn" id="startTimer">{messages.start}</button>
    <button class="control-panel--btn" id="stopBrew">{messages.reset}</button>
  </div>
</div>

<style>
  .wrapper {
    position: relative;
    max-width: 500px;
    margin-inline: auto;
  }

  .group {
    color: var(--text-secondary);
    font-size: 20px;
    text-transform: uppercase;
    font-weight: 600;

    @media screen and (max-width: 500px) {
      font-size: 14px;
    }
  }

  .time {
    position: absolute;
    left: 50%;
    top: 70%;
    transform: translate(-50%, -50%);
    font-family: 'Segmented', sans-serif;
    font-variant-numeric: tabular-nums;
    font-size: 50px;
  }

  @font-palette-values --segmented-light {
    font-family: Segmented;
    override-colors:
      0 oklch(0 0 0),
      1 oklch(0 0 0 / 0.08);
  }

  @font-palette-values --segmented-dark {
    font-family: Segmented;
    override-colors:
      0 oklch(100 0 0),
      1 oklch(100 0 0 / 0.08);
  }

  .segmented {
    font-family: Segmented, system-ui;
    font-variation-settings:
      'wght' 600,
      'wdth' 100,
      'slnt' 5;
  }

  html[data-theme='dark'] .segmented {
    font-palette: --segmented-dark;
  }

  .segmented {
    font-palette: --segmented-light;
  }

  .steps {
    position: absolute;
    left: 50%;
    top: 40%;
    transform: translate(-50%, -50%);
  }

  .step {
    display: flex;
    flex-flow: column;
    align-items: center;
    text-align: center;
    gap: 12px;
    font-size: 30px;
    color: var(--text-primary);

    @media screen and (max-width: 500px) {
      font-size: 18px;
    }
  }

  .baseArc {
    stroke: var(--color-timer-base-arc);
  }

  .progressArc {
    stroke: var(--color-timer-progress-arc);
  }

  .control-panel {
    position: sticky;
    inset-block-end: 0;
    background: var(--color-background);
    padding: 24px;
    display: flex;
    align-items: center;
    gap: 12px;
    justify-content: center;
  }

  .control-panel--btn {
    font-size: 16px;
    padding: 8px 14px;
    border-radius: 4px;
    border: none;
    min-width: 100px;
  }
</style>

<script>
  import { commonMessages } from '@/i18n/locales/common/en'

  type Step = {
    description?: string
    time: number
    water: string
    group?: string
  }

  let startTime: number
  let elapsedTime = 0
  let isRunning = false
  let stepIndex = 0
  const reverseTimer = true

  const root = document.getElementById('timer-root')
  const timeSlot = document.getElementById('time')
  const groupSlot = document.getElementById('group')
  const descriptionSlot = document.getElementById('description')
  const totalWeightSlot = document.getElementById('totalWeight')
  const progressArc = document.getElementById('progressArc')
  const startTimerBtn = document.getElementById('startTimer')!

  const messages = commonMessages(root?.dataset.locale)

  const steps: Step[] = root?.dataset.steps
    ? JSON.parse(root.dataset.steps).map((it: Step) => ({
      ...it,
      time: it.time * 1000
    }))
    : []

  let step = steps[stepIndex]
  let timeLeft = 0

  function updateStep(index: number) {
    if (!descriptionSlot || !totalWeightSlot || !groupSlot) return
    stepIndex = index
    step = steps[stepIndex]
    groupSlot.textContent = step.group ?? null
    descriptionSlot.textContent = step.description ?? null
    totalWeightSlot.textContent = step.water
  }

  function updateTime(time: number) {
    if (!timeSlot || !progressArc) return
    elapsedTime = time
    timeLeft = step.time - time
    const displayTime = reverseTimer ? timeLeft : elapsedTime
    timeSlot.textContent = formatTime(displayTime)
    progressArc.setAttribute('stroke-dasharray', getDashArray((displayTime / step.time) * 100))
  }

  function toggleTimer() {
    if (isRunning) {
      stopTimer()
    } else {
      startTimer()
    }
  }

  function startTimer() {
    isRunning = true
    startTime = performance.now() - elapsedTime
    requestAnimationFrame(updateTimer)
    startTimerBtn.textContent = messages['pause']
  }

  function stopTimer() {
    isRunning = false
    startTimerBtn.textContent = messages['start']
  }

  function resetTimer() {
    stopTimer()
    updateTime(0)
  }

  function updateTimer(currentTime: number) {
    if (!isRunning) return

    updateTime(currentTime - startTime)

    if (elapsedTime > step.time) {
      resetTimer()
      if (stepIndex + 1 >= steps.length) {
        console.debug('stopping brew', stepIndex, steps.length)
        stopBrew()
      } else {
        updateStep(stepIndex + 1)
        startTimer()
      }
    }

    requestAnimationFrame(updateTimer)
  }

  function formatTime(time: number) {
    const totalMilliseconds = Math.floor(time)
    const minutes = Math.floor((totalMilliseconds % 3600_000) / 60_000)
    const seconds = Math.floor((totalMilliseconds % 60_000) / 1000)

    return pad(minutes) + ':' + pad(seconds)
  }

  function getDashArray(percent: number) {
    const circumference = 2 * Math.PI * 90
    const dashArray = circumference * (percent / 100)
    return `${dashArray} ${circumference}`
  }

  function pad(value: number) {
    return value < 10 ? '0' + value : value
  }

  function stopBrew() {
    updateStep(0)
    resetTimer()
  }

  const stopBrewBtn = document.getElementById('stopBrew')

  if (startTimerBtn && stopBrewBtn) {
    startTimerBtn.addEventListener('click', () => {
      toggleTimer()
    })
    stopBrewBtn.addEventListener('click', () => {
      stopBrew()
    })
  }

  stopBrew()
</script>
