---
import type { CollectionEntry } from 'astro:content'

import { getCollection } from 'astro:content'

import RecipeCard from '../../../components/RecipeCard.astro'
import Layout from '../../../layouts/Layout.astro'
import { extractMethod, getRecipesByMethod } from '../../../utils'

interface Props {
  entries: CollectionEntry<'recipes'>[]
  entry: CollectionEntry<'recipes'>
  method: string
}

const { entries, entry, method } = Astro.props

const { Content } = (await entry?.render()) ?? {}

export async function getStaticPaths () {
  const recipes = await getCollection('recipes')
  const recipesByMethod = await getRecipesByMethod()

  return [
    ...recipesByMethod.map(([key, value]) => {
      return {
        params: { slug: key },
        props: { entries: value, method: key }
      }
    }),
    ...recipes.map(entry => ({
      params: { slug: entry.slug },
      props: { entry, method: extractMethod(entry.slug) }
    }))
  ]
}
---

<Layout>
  {
    Content
      ? <Content />
      : (
          <h1 class="title">{method}</h1>
          <div>
            {entries.map(recipe => (
              <RecipeCard {recipe} />
            ))}
          </div>
        )
  }
</Layout>

<style>
  .wrapper {
    display: flex;
  }
</style>
